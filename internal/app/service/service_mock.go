// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/gudimz/urlShortener/internal/app/repository/psql/models"
	ds "github.com/gudimz/urlShortener/internal/pkg/ds"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateShorten mocks base method.
func (m *MockRepository) CreateShorten(arg0 context.Context, arg1 *ds.Shorten) (*models.DBShorten, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShorten", arg0, arg1)
	ret0, _ := ret[0].(*models.DBShorten)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShorten indicates an expected call of CreateShorten.
func (mr *MockRepositoryMockRecorder) CreateShorten(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShorten", reflect.TypeOf((*MockRepository)(nil).CreateShorten), arg0, arg1)
}

// DeleteShorten mocks base method.
func (m *MockRepository) DeleteShorten(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShorten", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteShorten indicates an expected call of DeleteShorten.
func (mr *MockRepositoryMockRecorder) DeleteShorten(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShorten", reflect.TypeOf((*MockRepository)(nil).DeleteShorten), arg0, arg1)
}

// GetShorten mocks base method.
func (m *MockRepository) GetShorten(arg0 context.Context, arg1 string) (*models.DBShorten, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShorten", arg0, arg1)
	ret0, _ := ret[0].(*models.DBShorten)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShorten indicates an expected call of GetShorten.
func (mr *MockRepositoryMockRecorder) GetShorten(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShorten", reflect.TypeOf((*MockRepository)(nil).GetShorten), arg0, arg1)
}

// UpdateShorten mocks base method.
func (m *MockRepository) UpdateShorten(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShorten", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShorten indicates an expected call of UpdateShorten.
func (mr *MockRepositoryMockRecorder) UpdateShorten(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShorten", reflect.TypeOf((*MockRepository)(nil).UpdateShorten), arg0, arg1)
}
